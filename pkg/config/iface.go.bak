package config

import (
	"fmt"
	"os"
	"path/filepath"

	"gopkg.in/yaml.v3"
)

// NetplanConfig represents the top-level Netplan configuration
type NetplanConfig struct {
	Network Network `yaml:"network"`
}

// Network represents the main network configuration block
type Network struct {
	Version   int                    `yaml:"version"`
	Renderer  string                 `yaml:"renderer"`
	Ethernets map[string]Interface  `yaml:"ethernets,omitempty"`
	Bridges   map[string]Interface  `yaml:"bridges,omitempty"`
	VLANs     map[string]Interface  `yaml:"vlans,omitempty"`
	Bonds     map[string]Interface  `yaml:"bonds,omitempty"`
	WLANs     map[string]Interface  `yaml:"wifis,omitempty"`
}

// Interface represents a network interface configuration
type Interface struct {
	DHCP4          *bool             `yaml:"dhcp4,omitempty"`
	DHCP6          *bool             `yaml:"dhcp6,omitempty"`
	Addresses      []string          `yaml:"addresses,omitempty"`
	Gateway4       string            `yaml:"gateway4,omitempty"`
	Gateway6       string            `yaml:"gateway6,omitempty"`
	Nameservers    *Nameservers      `yaml:"nameservers,omitempty"`
	Routes         []Route           `yaml:"routes,omitempty"`
	Optional       *bool             `yaml:"optional,omitempty"`
	MTU            int               `yaml:"mtu,omitempty"`
	Bridge         *BridgeSettings   `yaml:"bridge,omitempty"`
	VLAN           *VLANSettings     `yaml:"vlan,omitempty"`
	Bond           *BondSettings     `yaml:"bond,omitempty"`
	Access_points  map[string]WLANSettings `yaml:"access-points,omitempty"`
}

// Nameservers represents DNS configuration
type Nameservers struct {
	Search    []string `yaml:"search,omitempty"`
	Addresses []string `yaml:"addresses,omitempty"`
}

// Route represents a network route
type Route struct {
	To     string `yaml:"to"`
	Via    string `yaml:"via,omitempty"`
	Metric int    `yaml:"metric,omitempty"`
}

// BridgeSettings represents bridge-specific settings
type BridgeSettings struct {
	Interfaces []string `yaml:"interfaces,omitempty"`
	Parameters map[string]interface{} `yaml:"parameters,omitempty"`
}

// VLANSettings represents VLAN-specific settings
type VLANSettings struct {
	ID        int    `yaml:"id"`
	Link      string `yaml:"link"`
}

// BondSettings represents bonding-specific settings
type BondSettings struct {
	Interfaces []string `yaml:"interfaces"`
	Mode       string   `yaml:"mode"`
	Parameters map[string]interface{} `yaml:"parameters,omitempty"`
}

// WLANSettings represents wireless network settings
type WLANSettings struct {
	Password string `yaml:"password,omitempty"`
	Mode     string `yaml:"mode,omitempty"`
	Channel  int    `yaml:"channel,omitempty"`
}

// NewNetplanConfig creates a new Netplan configuration with default values
func NewNetplanConfig() *NetplanConfig {
	return &NetplanConfig{
		Network: Network{
			Version:   2,
			Renderer: "networkd",
			Ethernets: make(map[string]Interface),
			Bridges:   make(map[string]Interface),
			VLANs:     make(map[string]Interface),
			Bonds:     make(map[string]Interface),
			WLANs:     make(map[string]Interface),
		},
	}
}

// AddEthernet adds or modifies an ethernet interface configuration
func (c *NetplanConfig) AddEthernet(name string) *Interface {
	iface := Interface{}
	c.Network.Ethernets[name] = iface
	return &c.Network.Ethernets[name]
}

// SetAddresses sets IP addresses for an interface
func (i *Interface) SetAddresses(addresses ...string) *Interface {
	i.Addresses = addresses
	return i
}

// SetNameservers sets DNS nameservers and search domains
func (i *Interface) SetNameservers(addresses []string, search []string) *Interface {
	i.Nameservers = &Nameservers{
		Addresses: addresses,
		Search:    search,
	}
	return i
}

// AddRoute adds a route to the interface configuration
func (i *Interface) AddRoute(to, via string, metric int) *Interface {
	route := Route{
		To:     to,
		Via:    via,
		Metric: metric,
	}
	i.Routes = append(i.Routes, route)
	return i
}

// SetDHCP configures DHCP for the interface
func (i *Interface) SetDHCP(dhcp4, dhcp6 bool) *Interface {
	i.DHCP4 = &dhcp4
	i.DHCP6 = &dhcp6
	return i
}

// SetMTU sets the MTU for the interface
func (i *Interface) SetMTU(mtu int) *Interface {
	i.MTU = mtu
	return i
}

// SetOptional marks the interface as optional
func (i *Interface) SetOptional(optional bool) *Interface {
	i.Optional = &optional
	return i
}

// SaveToFile saves the configuration to a YAML file
func (c *NetplanConfig) SaveToFile(filename string) error {
	// Ensure the directory exists
	dir := filepath.Dir(filename)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return fmt.Errorf("creating directory: %w", err)
	}

	// Marshal the configuration to YAML
	data, err := yaml.Marshal(c)
	if err != nil {
		return fmt.Errorf("marshaling config: %w", err)
	}

	// Write the file
	if err := os.WriteFile(filename, data, 0644); err != nil {
		return fmt.Errorf("writing config file: %w", err)
	}

	return nil
}

// LoadFromFile loads a Netplan configuration from a file
func LoadFromFile(filename string) (*NetplanConfig, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, fmt.Errorf("reading config file: %w", err)
	}

	config := &NetplanConfig{}
	if err := yaml.Unmarshal(data, config); err != nil {
		return nil, fmt.Errorf("parsing config file: %w", err)
	}

	return config, nil
}
